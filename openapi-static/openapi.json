{
  "openapi": "3.1.0",
  "info": {
    "title": "Perfect Schema API",
    "summary": "A deliberately precise API for contract testing.",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    },
    "license": {
      "name": "Apache-2.0"
    },
    "version": "1.0.0"
  },
  "paths": {
    "/token": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "OAuth2 token",
        "operationId": "issueToken",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_issueToken"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OAuth2 access token.",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                },
                "example": {
                  "access_token": "token-value",
                  "token_type": "bearer",
                  "expires_in": 3600,
                  "scope": "users:write orders:write"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Service status",
        "description": "Return service health, uptime, and monotonic timestamp information.",
        "operationId": "getStatus",
        "responses": {
          "200": {
            "description": "Status payload.",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                },
                "example": {
                  "status": "ok",
                  "version": "1.0.0",
                  "uptime_seconds": 1.23,
                  "monotonic_timestamp": 12345.6
                }
              }
            }
          }
        }
      }
    },
    "/echo": {
      "post": {
        "tags": [
          "Utility"
        ],
        "summary": "Echo a message",
        "description": "Return the provided message after applying requested transformations.",
        "operationId": "echoMessage",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EchoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Echoed payload.",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/EchoResponse"
                },
                "example": {
                  "message": "HELLO HELLO",
                  "characters": 11
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List users",
        "description": "List users with optional filtering, sorting, and pagination.",
        "operationId": "listUsers",
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Filter by name or email",
              "title": "Q"
            },
            "description": "Filter by name or email"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^-?name$",
              "default": "name",
              "title": "Sort"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of users.",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/UserCollection"
                },
                "example": {
                  "items": [],
                  "count": 0,
                  "links": {
                    "self": "/users"
                  }
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                }
              },
              "Cache-Control": {
                "schema": {
                  "type": "string"
                }
              },
              "X-Total-Count": {
                "schema": {
                  "type": "integer"
                }
              },
              "Link": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create user",
        "description": "Create a new user.",
        "operationId": "createUser",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully.",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "User already exists.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "description": "RFC 7807 compatible problem details.",
                  "properties": {
                    "type": {
                      "default": "about:blank",
                      "examples": [
                        "https://example.com/problems/not-found"
                      ],
                      "title": "Type",
                      "type": "string"
                    },
                    "title": {
                      "examples": [
                        "Resource not found"
                      ],
                      "title": "Title",
                      "type": "string"
                    },
                    "status": {
                      "examples": [
                        404
                      ],
                      "maximum": 599,
                      "minimum": 100,
                      "title": "Status",
                      "type": "integer"
                    },
                    "detail": {
                      "examples": [
                        "User with id ... was not found"
                      ],
                      "title": "Detail",
                      "type": "string"
                    },
                    "instance": {
                      "examples": [
                        "/users/123"
                      ],
                      "title": "Instance",
                      "type": "string"
                    }
                  },
                  "required": [
                    "title",
                    "status",
                    "detail",
                    "instance"
                  ],
                  "title": "ProblemDetail",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieve user",
        "description": "Retrieve a single user by identifier.",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "If-None-Match"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details.",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/UserDetail"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                }
              },
              "Cache-Control": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "304": {
            "description": "Not modified.",
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "description": "RFC 7807 compatible problem details.",
                  "properties": {
                    "type": {
                      "default": "about:blank",
                      "examples": [
                        "https://example.com/problems/not-found"
                      ],
                      "title": "Type",
                      "type": "string"
                    },
                    "title": {
                      "examples": [
                        "Resource not found"
                      ],
                      "title": "Title",
                      "type": "string"
                    },
                    "status": {
                      "examples": [
                        404
                      ],
                      "maximum": 599,
                      "minimum": 100,
                      "title": "Status",
                      "type": "integer"
                    },
                    "detail": {
                      "examples": [
                        "User with id ... was not found"
                      ],
                      "title": "Detail",
                      "type": "string"
                    },
                    "instance": {
                      "examples": [
                        "/users/123"
                      ],
                      "title": "Instance",
                      "type": "string"
                    }
                  },
                  "required": [
                    "title",
                    "status",
                    "detail",
                    "instance"
                  ],
                  "title": "ProblemDetail",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Replace user",
        "description": "Replace a user resource.",
        "operationId": "replaceUser",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                }
              },
              "Cache-Control": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "User already exists.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "description": "RFC 7807 compatible problem details.",
                  "properties": {
                    "type": {
                      "default": "about:blank",
                      "examples": [
                        "https://example.com/problems/not-found"
                      ],
                      "title": "Type",
                      "type": "string"
                    },
                    "title": {
                      "examples": [
                        "Resource not found"
                      ],
                      "title": "Title",
                      "type": "string"
                    },
                    "status": {
                      "examples": [
                        404
                      ],
                      "maximum": 599,
                      "minimum": 100,
                      "title": "Status",
                      "type": "integer"
                    },
                    "detail": {
                      "examples": [
                        "User with id ... was not found"
                      ],
                      "title": "Detail",
                      "type": "string"
                    },
                    "instance": {
                      "examples": [
                        "/users/123"
                      ],
                      "title": "Instance",
                      "type": "string"
                    }
                  },
                  "required": [
                    "title",
                    "status",
                    "detail",
                    "instance"
                  ],
                  "title": "ProblemDetail",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user",
        "description": "Patch a user resource.",
        "operationId": "updateUser",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPatch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                }
              },
              "Cache-Control": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Conflict updating user.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "description": "RFC 7807 compatible problem details.",
                  "properties": {
                    "type": {
                      "default": "about:blank",
                      "examples": [
                        "https://example.com/problems/not-found"
                      ],
                      "title": "Type",
                      "type": "string"
                    },
                    "title": {
                      "examples": [
                        "Resource not found"
                      ],
                      "title": "Title",
                      "type": "string"
                    },
                    "status": {
                      "examples": [
                        404
                      ],
                      "maximum": 599,
                      "minimum": 100,
                      "title": "Status",
                      "type": "integer"
                    },
                    "detail": {
                      "examples": [
                        "User with id ... was not found"
                      ],
                      "title": "Detail",
                      "type": "string"
                    },
                    "instance": {
                      "examples": [
                        "/users/123"
                      ],
                      "title": "Instance",
                      "type": "string"
                    }
                  },
                  "required": [
                    "title",
                    "status",
                    "detail",
                    "instance"
                  ],
                  "title": "ProblemDetail",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Delete user",
        "description": "Delete a user.",
        "operationId": "deleteUser",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user_id}/orders": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "List a user's orders",
        "description": "List orders for a single user.",
        "operationId": "listUserOrders",
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCollection"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                }
              },
              "Cache-Control": {
                "schema": {
                  "type": "string"
                }
              },
              "X-Total-Count": {
                "schema": {
                  "type": "integer"
                }
              },
              "Link": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "description": "RFC 7807 compatible problem details.",
                  "properties": {
                    "type": {
                      "default": "about:blank",
                      "examples": [
                        "https://example.com/problems/not-found"
                      ],
                      "title": "Type",
                      "type": "string"
                    },
                    "title": {
                      "examples": [
                        "Resource not found"
                      ],
                      "title": "Title",
                      "type": "string"
                    },
                    "status": {
                      "examples": [
                        404
                      ],
                      "maximum": 599,
                      "minimum": 100,
                      "title": "Status",
                      "type": "integer"
                    },
                    "detail": {
                      "examples": [
                        "User with id ... was not found"
                      ],
                      "title": "Detail",
                      "type": "string"
                    },
                    "instance": {
                      "examples": [
                        "/users/123"
                      ],
                      "title": "Instance",
                      "type": "string"
                    }
                  },
                  "required": [
                    "title",
                    "status",
                    "detail",
                    "instance"
                  ],
                  "title": "ProblemDetail",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "List orders",
        "operationId": "listOrders",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/OrderStatus"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Status"
            }
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "From"
            }
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "date-time"
                },
                {
                  "type": "null"
                }
              ],
              "title": "To"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "default": 0,
              "title": "Offset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCollection"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                }
              },
              "Cache-Control": {
                "schema": {
                  "type": "string"
                }
              },
              "X-Total-Count": {
                "schema": {
                  "type": "integer"
                }
              },
              "Link": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create order",
        "operationId": "createOrder",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/OrderRead"
                }
              }
            },
            "headers": {
              "Location": {
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              },
              "ETag": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid order payload.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "description": "RFC 7807 compatible problem details.",
                  "properties": {
                    "type": {
                      "default": "about:blank",
                      "examples": [
                        "https://example.com/problems/not-found"
                      ],
                      "title": "Type",
                      "type": "string"
                    },
                    "title": {
                      "examples": [
                        "Resource not found"
                      ],
                      "title": "Title",
                      "type": "string"
                    },
                    "status": {
                      "examples": [
                        404
                      ],
                      "maximum": 599,
                      "minimum": 100,
                      "title": "Status",
                      "type": "integer"
                    },
                    "detail": {
                      "examples": [
                        "User with id ... was not found"
                      ],
                      "title": "Detail",
                      "type": "string"
                    },
                    "instance": {
                      "examples": [
                        "/users/123"
                      ],
                      "title": "Instance",
                      "type": "string"
                    }
                  },
                  "required": [
                    "title",
                    "status",
                    "detail",
                    "instance"
                  ],
                  "title": "ProblemDetail",
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "description": "RFC 7807 compatible problem details.",
                  "properties": {
                    "type": {
                      "default": "about:blank",
                      "examples": [
                        "https://example.com/problems/not-found"
                      ],
                      "title": "Type",
                      "type": "string"
                    },
                    "title": {
                      "examples": [
                        "Resource not found"
                      ],
                      "title": "Title",
                      "type": "string"
                    },
                    "status": {
                      "examples": [
                        404
                      ],
                      "maximum": 599,
                      "minimum": 100,
                      "title": "Status",
                      "type": "integer"
                    },
                    "detail": {
                      "examples": [
                        "User with id ... was not found"
                      ],
                      "title": "Detail",
                      "type": "string"
                    },
                    "instance": {
                      "examples": [
                        "/users/123"
                      ],
                      "title": "Instance",
                      "type": "string"
                    }
                  },
                  "required": [
                    "title",
                    "status",
                    "detail",
                    "instance"
                  ],
                  "title": "ProblemDetail",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order_id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Retrieve order",
        "operationId": "getOrder",
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/OrderRead"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                }
              },
              "Cache-Control": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "description": "RFC 7807 compatible problem details.",
                  "properties": {
                    "type": {
                      "default": "about:blank",
                      "examples": [
                        "https://example.com/problems/not-found"
                      ],
                      "title": "Type",
                      "type": "string"
                    },
                    "title": {
                      "examples": [
                        "Resource not found"
                      ],
                      "title": "Title",
                      "type": "string"
                    },
                    "status": {
                      "examples": [
                        404
                      ],
                      "maximum": 599,
                      "minimum": 100,
                      "title": "Status",
                      "type": "integer"
                    },
                    "detail": {
                      "examples": [
                        "User with id ... was not found"
                      ],
                      "title": "Detail",
                      "type": "string"
                    },
                    "instance": {
                      "examples": [
                        "/users/123"
                      ],
                      "title": "Instance",
                      "type": "string"
                    }
                  },
                  "required": [
                    "title",
                    "status",
                    "detail",
                    "instance"
                  ],
                  "title": "ProblemDetail",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Replace order",
        "operationId": "replaceOrder",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/OrderRead"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                }
              },
              "Cache-Control": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "description": "RFC 7807 compatible problem details.",
                  "properties": {
                    "type": {
                      "default": "about:blank",
                      "examples": [
                        "https://example.com/problems/not-found"
                      ],
                      "title": "Type",
                      "type": "string"
                    },
                    "title": {
                      "examples": [
                        "Resource not found"
                      ],
                      "title": "Title",
                      "type": "string"
                    },
                    "status": {
                      "examples": [
                        404
                      ],
                      "maximum": 599,
                      "minimum": 100,
                      "title": "Status",
                      "type": "integer"
                    },
                    "detail": {
                      "examples": [
                        "User with id ... was not found"
                      ],
                      "title": "Detail",
                      "type": "string"
                    },
                    "instance": {
                      "examples": [
                        "/users/123"
                      ],
                      "title": "Instance",
                      "type": "string"
                    }
                  },
                  "required": [
                    "title",
                    "status",
                    "detail",
                    "instance"
                  ],
                  "title": "ProblemDetail",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Orders"
        ],
        "summary": "Update order",
        "operationId": "updateOrder",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Order Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json; charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/OrderRead"
                }
              }
            },
            "headers": {
              "ETag": {
                "schema": {
                  "type": "string"
                }
              },
              "Cache-Control": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/problem+json": {
                "schema": {
                  "description": "RFC 7807 compatible problem details.",
                  "properties": {
                    "type": {
                      "default": "about:blank",
                      "examples": [
                        "https://example.com/problems/not-found"
                      ],
                      "title": "Type",
                      "type": "string"
                    },
                    "title": {
                      "examples": [
                        "Resource not found"
                      ],
                      "title": "Title",
                      "type": "string"
                    },
                    "status": {
                      "examples": [
                        404
                      ],
                      "maximum": 599,
                      "minimum": 100,
                      "title": "Status",
                      "type": "integer"
                    },
                    "detail": {
                      "examples": [
                        "User with id ... was not found"
                      ],
                      "title": "Detail",
                      "type": "string"
                    },
                    "instance": {
                      "examples": [
                        "/users/123"
                      ],
                      "title": "Instance",
                      "type": "string"
                    }
                  },
                  "required": [
                    "title",
                    "status",
                    "detail",
                    "instance"
                  ],
                  "title": "ProblemDetail",
                  "type": "object"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Orders"
        ],
        "summary": "Delete order",
        "operationId": "deleteOrder",
        "security": [
          {
            "OAuth2PasswordBearer": []
          },
          {
            "APIKeyHeader": []
          }
        ],
        "parameters": [
          {
            "name": "order_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "Order Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuditLogEntry": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "action": {
            "type": "string",
            "title": "Action"
          },
          "summary": {
            "type": "string",
            "title": "Summary"
          },
          "performed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Performed At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "action",
          "summary",
          "performed_at"
        ],
        "title": "AuditLogEntry",
        "description": "Audit log entry returned in responses."
      },
      "Body_issueToken": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "password"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_issueToken"
      },
      "EchoRequest": {
        "properties": {
          "message": {
            "type": "string",
            "maxLength": 500,
            "minLength": 1,
            "title": "Message",
            "examples": [
              "Hello"
            ]
          },
          "repeat": {
            "type": "integer",
            "maximum": 10.0,
            "minimum": 1.0,
            "title": "Repeat",
            "default": 1,
            "examples": [
              2
            ]
          },
          "uppercase": {
            "type": "boolean",
            "title": "Uppercase",
            "default": false,
            "examples": [
              true
            ]
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "EchoRequest",
        "description": "Input for the echo endpoint."
      },
      "EchoResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "examples": [
              "HELLO HELLO"
            ]
          },
          "characters": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Characters",
            "examples": [
              10
            ]
          }
        },
        "type": "object",
        "required": [
          "message",
          "characters"
        ],
        "title": "EchoResponse",
        "description": "Echoed message response."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "OrderCollection": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/OrderRead"
            },
            "type": "array",
            "title": "Items"
          },
          "count": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Count"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "type": "object",
        "required": [
          "count",
          "links"
        ],
        "title": "OrderCollection",
        "description": "Response for order list."
      },
      "OrderCreate": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/OrderStatus",
            "default": "pending"
          },
          "total": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string",
                "pattern": "^(?!^[-+.]*$)[+-]?0*\\d*\\.?\\d*$"
              }
            ],
            "title": "Total",
            "examples": [
              "125.50"
            ]
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id",
            "examples": [
              "00000000-0000-0000-0000-000000000001"
            ]
          },
          "item_skus": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "maxItems": 10,
            "minItems": 1,
            "title": "Item Skus",
            "examples": [
              [
                "SKU-1"
              ]
            ]
          }
        },
        "type": "object",
        "required": [
          "total",
          "user_id",
          "item_skus"
        ],
        "title": "OrderCreate",
        "description": "Schema for creating orders."
      },
      "OrderRead": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/OrderStatus",
            "default": "pending"
          },
          "total": {
            "type": "string",
            "pattern": "^(?!^[-+.]*$)[+-]?0*\\d*\\.?\\d*$",
            "title": "Total",
            "examples": [
              "125.50"
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "title": "User Id"
          },
          "placed_at": {
            "type": "string",
            "format": "date-time",
            "title": "Placed At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "total",
          "id",
          "user_id",
          "placed_at",
          "updated_at"
        ],
        "title": "OrderRead",
        "description": "Order representation."
      },
      "OrderStatus": {
        "type": "string",
        "enum": [
          "pending",
          "processing",
          "shipped",
          "delivered",
          "cancelled"
        ],
        "title": "OrderStatus",
        "description": "Enumeration of the lifecycle states of an order."
      },
      "OrderUpdate": {
        "properties": {
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OrderStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "total": {
            "anyOf": [
              {
                "type": "number",
                "exclusiveMinimum": 0.0
              },
              {
                "type": "string",
                "pattern": "^(?!^[-+.]*$)[+-]?0*\\d*\\.?\\d*$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Total"
          }
        },
        "type": "object",
        "title": "OrderUpdate",
        "description": "Schema for updating orders."
      },
      "PaginationLinks": {
        "properties": {
          "self": {
            "type": "string",
            "title": "Self",
            "examples": [
              "/users?offset=0&limit=20"
            ]
          },
          "next": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Next",
            "examples": [
              "/users?offset=10&limit=5"
            ]
          },
          "prev": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prev",
            "examples": [
              "/users?offset=0&limit=5"
            ]
          }
        },
        "additionalProperties": false,
        "type": "object",
        "required": [
          "self"
        ],
        "title": "PaginationLinks",
        "description": "Link relations for paginated endpoints."
      },
      "StatusResponse": {
        "properties": {
          "status": {
            "type": "string",
            "const": "ok",
            "title": "Status",
            "examples": [
              "ok"
            ]
          },
          "version": {
            "type": "string",
            "title": "Version",
            "examples": [
              "1.0.0"
            ]
          },
          "uptime_seconds": {
            "type": "number",
            "minimum": 0.0,
            "title": "Uptime Seconds",
            "examples": [
              1234.56
            ]
          },
          "monotonic_timestamp": {
            "type": "number",
            "minimum": 0.0,
            "title": "Monotonic Timestamp",
            "examples": [
              98765.432
            ]
          }
        },
        "type": "object",
        "required": [
          "status",
          "version",
          "uptime_seconds",
          "monotonic_timestamp"
        ],
        "title": "StatusResponse",
        "description": "Application status payload."
      },
      "TokenResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "const": "bearer",
            "title": "Token Type",
            "default": "bearer"
          },
          "expires_in": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Expires In",
            "examples": [
              3600
            ]
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          }
        },
        "type": "object",
        "required": [
          "access_token",
          "expires_in"
        ],
        "title": "TokenResponse",
        "description": "OAuth2 token response."
      },
      "UserCollection": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/UserRead"
            },
            "type": "array",
            "title": "Items"
          },
          "count": {
            "type": "integer",
            "minimum": 0.0,
            "title": "Count",
            "examples": [
              3
            ]
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "type": "object",
        "required": [
          "count",
          "links"
        ],
        "title": "UserCollection",
        "description": "Response for user list endpoints."
      },
      "UserCreate": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "examples": [
              "user@example.com"
            ]
          },
          "full_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Full Name",
            "examples": [
              "Ada Lovelace"
            ]
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true,
            "examples": [
              true
            ]
          }
        },
        "type": "object",
        "required": [
          "email",
          "full_name"
        ],
        "title": "UserCreate",
        "description": "Schema for creating users."
      },
      "UserDetail": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "examples": [
              "user@example.com"
            ]
          },
          "full_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Full Name",
            "examples": [
              "Ada Lovelace"
            ]
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true,
            "examples": [
              true
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "joined_at": {
            "type": "string",
            "format": "date-time",
            "title": "Joined At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          },
          "audit_logs": {
            "items": {
              "$ref": "#/components/schemas/AuditLogEntry"
            },
            "type": "array",
            "title": "Audit Logs"
          }
        },
        "type": "object",
        "required": [
          "email",
          "full_name",
          "id",
          "joined_at",
          "updated_at"
        ],
        "title": "UserDetail",
        "description": "Detailed user representation including related resources."
      },
      "UserPatch": {
        "properties": {
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "full_name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 200,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Name"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          }
        },
        "type": "object",
        "title": "UserPatch",
        "description": "Alias for PATCH operations."
      },
      "UserRead": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email",
            "examples": [
              "user@example.com"
            ]
          },
          "full_name": {
            "type": "string",
            "maxLength": 200,
            "minLength": 1,
            "title": "Full Name",
            "examples": [
              "Ada Lovelace"
            ]
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true,
            "examples": [
              true
            ]
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "joined_at": {
            "type": "string",
            "format": "date-time",
            "title": "Joined At"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "title": "Updated At"
          }
        },
        "type": "object",
        "required": [
          "email",
          "full_name",
          "id",
          "joined_at",
          "updated_at"
        ],
        "title": "UserRead",
        "description": "User representation in responses."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {
              "users:read": "Read user information",
              "users:write": "Modify users",
              "orders:read": "Read orders",
              "orders:write": "Modify orders"
            },
            "tokenUrl": "/token"
          }
        }
      },
      "APIKeyHeader": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    }
  }
}